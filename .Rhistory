install.packages(c("chron", "plyr", "scales", "stringi"))
install.packages("swild")
install.packages("swirl")
swirl()
library swirl
library swirl()
library(swirl)
swirl()
q
swirl("Data Analysis"")
""
swirl("Data Analysis")
install_from_swirl("Data Analysis")
install_from_swirl("Mathematical Biostatistics Boot Camp")
install_from_swirl("Open Intro")
install_from_swirl("Regression Models")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Statistical Inference")
# Casino winnings from Monday to Friday
poker_vector <- c(140, -50, 20, -120, 240)
roulette_vector <- c(-24, -50, 100, -350, 10)
days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
names(poker_vector) <- days_vector
names(roulette_vector) <- days_vector
# Create logical vector corresponding to profitable poker days: selection_vector
selection_vector <- poker_vector[poker_vector > 0]
# Select amounts for profitable poker days: poker_profits
poker_profits <-poker_vector[selection_vector]
selection_vector
selection_vector <- poker_vector[poker_vector > 0] ==t
selection_vector <- poker_vector[poker_vector > 0] ==t
selection_vector <- poker_vector[1:5] >0
selection_vector
install.packages(c("chron", "crayon", "httr", "quantmod", "R6", "Rcpp", "RCurl", "RMySQL", "scales", "stringi", "TTR", "XML"))
install.packages(c("curl", "RMySQL"))
install.packages(c("curl", "RMySQL"))
install.packages("curl")
load("swirl")
library(swirl)
rm(list=ls())
swirld()
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4)~parent,galton)
regrline <- lm(child~parent,galton)
abline(regrline,lwd=3,col='red')
summarY(regrline)
summary(regrline)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
install.packages("caret")
install.packages(c("curl", "doParallel", "foreach", "ggplot2", "irlba", "iterators", "jsonlite", "lubridate", "Rcpp", "RMySQL", "stringi", "testthat", "xtable"))
install.packages("kernlab")
rm(list = ls())
# load libraries
library(caret)
library(corrplot)
library(rattle)
library(tree)
#setwd("E:/data/ML")
#check if directory exists
if (!file.exists("data"))
{
dir.create("data")
}
if (!file.exists("pml-training.csv")) {
download.file("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile = "data/pml-training.csv")
}
if (!file.exists("pml-testing.csv")) {
download.file("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", destfile = "data/pml-testing.csv")
}
pmlTesting <- read.csv("data/pml-testing.csv", sep = ",", na.strings = c("", "NA"))
pmlTraining <- read.csv("data/pml-training.csv", sep = ",", na.strings = c("", "NA"))
setwd("E:/data/ML")
#check if directory exists
if (!file.exists("data"))
{
dir.create("data")
}
if (!file.exists("pml-training.csv")) {
download.file("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile = "data/pml-training.csv")
}
if (!file.exists("pml-testing.csv")) {
download.file("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", destfile = "data/pml-testing.csv")
}
pmlTesting <- read.csv("data/pml-testing.csv", sep = ",", na.strings = c("", "NA"))
pmlTraining <- read.csv("data/pml-training.csv", sep = ",", na.strings = c("", "NA"))
# Load the Training Dataset
pmlTraining <- read.csv("data/pml-training.csv", sep = ",", na.strings = c("", "NA"))
# Load the Testing Dataset
pmlTesting <- read.csv("data/pml-testing.csv", sep = ",", na.strings = c("", "NA"))
# remove variables that are moslty NA
pmlTraining <- pmlTraining[ , colSums(is.na(pmlTraining)) == 0]
# remove non predictive variables
CleanIndex <-  which(names(pmlTraining) %in% c('X', 'user_name', 'raw_timestamp_part_1', 'raw_timestamp_part_2', 'cvtd_timestamp', 'new_window','num_window'))
pmlTraining <- pmlTraining[, -CleanIndex]
# Remove the classe variable (this is what we are trying to predict)
#pmlTraining <- pmlTraining[, -53]
# Remove variables near Zero Variance (they won't contribute to the model)
zv <- nearZeroVar(pmlTraining[sapply(pmlTraining, is.numeric)], saveMetrics = TRUE)
pmlTraining <- pmlTraining[, -zv[, 'nzv']==0]
pmlTrainingold <-pmlTraining
pmlTraining <-pmlTrainingold
correlMatrix <- cor(na.omit(pmlTraining[sapply(pmlTraining, is.numeric)]))
pmlTraining_low <- pmlTraining[,-findCorrelation(correlMatrix, cutoff = .90, verbose = TRUE)]
corrplot(correlMatrix, order = "FPC", method = "shade", type = "lower", tl.cex = 0.8,
tl.col = rgb(0, 0, 0))
dim (pmlTraining_low)
set.seed(123)
inTrain <- createDataPartition(y=pmlTraining_low$classe, p=0.8, list=FALSE)
trainingSet <- pmlTraining_low[inTrain,];   # 80%
testingSet  <- pmlTraining_low[-inTrain,]   # 20%
modFit <- train(classe ~ .,method="rpart",data=trainingSet)
print(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
remove.packages("RGtk2")
remove.packages("rattle")
install.packages("rattle")
install.packages("rattle")
fancyRpartPlot(modFit$finalModel)
rm(list = ls())
# load libraries
library(caret)
library(corrplot)
library(rattle)
library(tree)
